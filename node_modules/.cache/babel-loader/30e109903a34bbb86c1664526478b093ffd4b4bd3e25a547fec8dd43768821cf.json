{"ast":null,"code":"import axios from 'axios'; //create a post fn\n\nexport const getAllPetPosts = () => {\n  return fetch(`http://localhost:8088/PetPosts?_embed=ownersPets\n    `).then(res => res.json()); //get a response, make it readable //embed part get info on ownerPetPosts\n};\n// //so can get owner id, but you want owner name it is in user object /table! user id in owner table\n// //so look at service petPost , then loom at owner id and compare \n// //EMBED is if the thing you want is FK on something else, expand is if you have foreign key for something to somewhere else\n// //owner has userid for fk:expand to get user object\n\n// //claim petPost fn for that you need owner petPost thats what you put in ()\n// export const assignPetPost=(ownerPetPost)=>{\n//     return fetch (`http://localhost:8088/ownersPets`, {\n//         method: \"POST\",\n//         headers: {\n//             \"Content-Type\":\" application/json\",\n//         },\n//         body: JSON.stringify(ownerPetPost),\n//         })\n// }\n\nexport const updatePetPost = petPost => {\n  return fetch(`http://localhost:8088/PetPosts/${petPost.id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(petPost)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error updating pet post:', error);\n    throw error; // rethrowing the error so caller can handle it\n  });\n};\n\n//DELETE A PETPOST FN: for owner view so they can delete \nexport const deletePetPost = petPostId => {\n  return fetch(`http://localhost:8088/PetPosts/${petPostId}`, {\n    //note ${petPostId} instead of petPost.id\n    method: \"DELETE\"\n  });\n};\n\n// //create petPost fn\nexport const createPetPost = petPost => {\n  return fetch(`http://localhost:8088/PetPosts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \" application/json\"\n    },\n    body: JSON.stringify(petPost)\n  });\n};\n\n// export const createPetPost = async (formData) => {\n//     try {\n//         const response = await axios.post('/api/petPosts', formData, {\n//             headers: {\n//                 'Content-Type': 'multipart/form-data',\n//             },\n//         });\n//         return response.data;\n//     } catch (error) {\n//         console.error('Error creating pet post:', error);\n//         throw error;\n//     }\n// };\n\nexport const getPetPostById = id => {\n  return fetch(`http://localhost:8088/PetPosts/${id}`).then(res => res.json());\n};","map":{"version":3,"names":["axios","getAllPetPosts","fetch","then","res","json","updatePetPost","petPost","id","method","headers","body","JSON","stringify","response","ok","Error","catch","error","console","deletePetPost","petPostId","createPetPost","getPetPostById"],"sources":["C:/Users/user/workspace/c9/test2/src/services/petPostService.jsx"],"sourcesContent":["import axios from 'axios'; //create a post fn\r\n\r\nexport const getAllPetPosts=()=>{\r\n    return fetch(`http://localhost:8088/PetPosts?_embed=ownersPets\r\n    `).then((res)=>res.json())//get a response, make it readable //embed part get info on ownerPetPosts\r\n}\r\n// //so can get owner id, but you want owner name it is in user object /table! user id in owner table\r\n// //so look at service petPost , then loom at owner id and compare \r\n// //EMBED is if the thing you want is FK on something else, expand is if you have foreign key for something to somewhere else\r\n// //owner has userid for fk:expand to get user object\r\n\r\n// //claim petPost fn for that you need owner petPost thats what you put in ()\r\n// export const assignPetPost=(ownerPetPost)=>{\r\n//     return fetch (`http://localhost:8088/ownersPets`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             \"Content-Type\":\" application/json\",\r\n//         },\r\n//         body: JSON.stringify(ownerPetPost),\r\n//         })\r\n// }\r\n\r\n\r\nexport const updatePetPost = (petPost) => {\r\n    return fetch(`http://localhost:8088/PetPosts/${petPost.id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(petPost),\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    })\r\n    .catch(error => {\r\n        console.error('Error updating pet post:', error);\r\n        throw error; // rethrowing the error so caller can handle it\r\n    });\r\n}\r\n\r\n\r\n//DELETE A PETPOST FN: for owner view so they can delete \r\nexport const deletePetPost=(petPostId)=>{\r\n    return fetch(`http://localhost:8088/PetPosts/${petPostId}`,{ //note ${petPostId} instead of petPost.id\r\n    method: \"DELETE\",\r\n})\r\n}\r\n\r\n// //create petPost fn\r\nexport const createPetPost=(petPost)=>{\r\n    return fetch (`http://localhost:8088/PetPosts`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\":\" application/json\",\r\n        },\r\n        body: JSON.stringify(petPost),\r\n        })\r\n}\r\n\r\n\r\n\r\n// export const createPetPost = async (formData) => {\r\n//     try {\r\n//         const response = await axios.post('/api/petPosts', formData, {\r\n//             headers: {\r\n//                 'Content-Type': 'multipart/form-data',\r\n//             },\r\n//         });\r\n//         return response.data;\r\n//     } catch (error) {\r\n//         console.error('Error creating pet post:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n\r\n\r\n\r\n\r\nexport const getPetPostById = (id) => {\r\n    return fetch(`http://localhost:8088/PetPosts/${id}`).then((res) => res.json());\r\n  };\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B,OAAO,MAAMC,cAAc,GAACA,CAAA,KAAI;EAC5B,OAAOC,KAAK,CAAC;AACjB,KAAK,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAGA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAK;EACtC,OAAOL,KAAK,CAAC,kCAAkCK,OAAO,CAACC,EAAE,EAAE,EAAE;IACzDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;EAChC,CAAC,CAAC,CACDJ,IAAI,CAACW,QAAQ,IAAI;IACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOF,QAAQ,CAACT,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDY,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK,CAAC,CAAC;EACjB,CAAC,CAAC;AACN,CAAC;;AAGD;AACA,OAAO,MAAME,aAAa,GAAEC,SAAS,IAAG;EACpC,OAAOnB,KAAK,CAAC,kCAAkCmB,SAAS,EAAE,EAAC;IAAE;IAC7DZ,MAAM,EAAE;EACZ,CAAC,CAAC;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,aAAa,GAAEf,OAAO,IAAG;EAClC,OAAOL,KAAK,CAAE,gCAAgC,EAAE;IAC5CO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAC;IACnB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;EAC5B,CAAC,CAAC;AACV,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,OAAO,MAAMgB,cAAc,GAAIf,EAAE,IAAK;EAClC,OAAON,KAAK,CAAC,kCAAkCM,EAAE,EAAE,CAAC,CAACL,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAChF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}