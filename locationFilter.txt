To implement filtering of pet posts based on the location of the logged-in user, considering that multiple users can be logged in from different locations, you need to dynamically fetch and use the logged-in user's location to filter pet posts. Below is a comprehensive solution with step-by-step instructions and comments:

Step-by-Step Solution:
1. React Component Setup (PetPost.jsx)
javascript
Copy code
import React, { useState, useEffect } from 'react';
import { getAllPetPosts } from '../../services/petPostService';
import { useNavigate } from 'react-router-dom';
import { FilterBar } from './FilterBar';

const PetPost = ({ loggedInUser }) => {
  const [petPosts, setPetPosts] = useState([]);
  const [filteredPosts, setFilteredPosts] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedAgeRange, setSelectedAgeRange] = useState('0');
  const [selectedSpecies, setSelectedSpecies] = useState('0');
  const [userLocation, setUserLocation] = useState({
    city: loggedInUser.city,
    state: loggedInUser.state,
  }); // Use logged-in user's initial location
  const [currentPage, setCurrentPage] = useState(1);
  const postsPerPage = 20;
  const navigate = useNavigate();

  // Fetch all pet posts from the API
  const fetchAllPetPosts = async () => {
    try {
      const petPostArray = await getAllPetPosts();

      // Sort pet posts by timestamp in descending order
      const sortedPosts = petPostArray.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

      let updatedPosts = sortedPosts;

      // Apply species filter if selected
      updatedPosts = applySpeciesFilter(updatedPosts);

      // Apply age filter if selected
      updatedPosts = applyAgeFilter(updatedPosts);

      // Apply search term filter
      updatedPosts = applySearchFilter(updatedPosts);

      // Filter by location based on user's location
      updatedPosts = applyLocationFilter(updatedPosts);

      setFilteredPosts(updatedPosts);
    } catch (error) {
      console.error('Error fetching pet posts:', error);
    }
  };

  useEffect(() => {
    fetchAllPetPosts();
  }, [searchTerm, selectedAgeRange, selectedSpecies, userLocation]); // Include userLocation in dependencies

  // Function to apply species filter
  const applySpeciesFilter = (posts) => {
    if (selectedSpecies === '0') {
      return posts; // Return all posts if no species filter selected
    } else {
      return posts.filter(post => {
        if (selectedSpecies === '3') {
          return post.species.toLowerCase() !== 'dog' && post.species.toLowerCase() !== 'cat';
        } else {
          return post.species.toLowerCase() === mapSpeciesFilter(selectedSpecies).toLowerCase();
        }
      });
    }
  };

  // Function to map species filter option to corresponding string
  const mapSpeciesFilter = (selectedSpeciesOption) => {
    switch (selectedSpeciesOption) {
      case '1':
        return 'dog';
      case '2':
        return 'cat';
      case '3':
        return 'others';
      default:
        return '';
    }
  };

  // Function to apply age filtering
  const applyAgeFilter = (posts) => {
    switch (selectedAgeRange) {
      case '1':
        return posts.filter(post => {
          if (post.ageUnit === 'years') {
            return parseInt(post.age) <= 1;
          } else {
            return true; // Consider all if ageUnit is not "years" (e.g., weeks, months)
          }
        });
      case '2':
        return posts.filter(post => {
          if (post.ageUnit === 'years') {
            return parseInt(post.age) >= 2 && parseInt(post.age) <= 9;
          } else {
            return false; // Exclude posts with ageUnit other than "years"
          }
        });
      case '3':
        return posts.filter(post => {
          if (post.ageUnit === 'years') {
            return parseInt(post.age) >= 10;
          } else {
            return false; // Exclude posts with ageUnit other than "years"
          }
        });
      default:
        return posts;
    }
  };

  // Function to apply search term filter
  const applySearchFilter = (posts) => {
    if (searchTerm.trim() === '') {
      return posts; // If no search term, return all posts
    }
    return posts.filter(post =>
      post.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.species.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.breed.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.medicalCondition.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.behavioralIssues.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.reasonForRehoming.toLowerCase().includes(searchTerm.toLowerCase())
    );
  };

  // Function to apply location filter
  const applyLocationFilter = (posts) => {
    return posts.filter(post => {
      const owner = loggedInUser.id === post.ownerId ? loggedInUser : null; // Assuming owner data is embedded in the pet post
      if (owner) {
        return owner.city.toLowerCase() === userLocation.city.toLowerCase() &&
               owner.state.toLowerCase() === userLocation.state.toLowerCase();
      }
      return false;
    });
  };

  // Handle page change
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  // Render the component
  return (
    <div className="petPosts-container">
      <h2>Available Pets</h2>
      <div className="filter">
        {/* Species filter */}
        <select name="species" id="species" onChange={(event) => setSelectedSpecies(event.target.value)}>
          <option value="0">All Species</option>
          <option value="1">Dogs</option>
          <option value="2">Cats</option>
          <option value="3">Others</option>
        </select>

        {/* Age filter */}
        <select name="age" id="age" onChange={(event) => setSelectedAgeRange(event.target.value)}>
          <option value="0">All Ages</option>
          <option value="1">0-1 Years</option>
          <option value="2">2-9 Years</option>
          <option value="3">10+ Years</option>
        </select>

        {/* Location filter (UI) */}
        <div className="location-filter">
          <label htmlFor="city">City:</label>
          <input type="text" id="city" value={userLocation.city} onChange={(e) => setUserLocation({ ...userLocation, city: e.target.value })} />
          <label htmlFor="state">State:</label>
          <input type="text" id="state" value={userLocation.state} onChange={(e) => setUserLocation({ ...userLocation, state: e.target.value })} />
        </div>

        {/* Search bar component */}
        <FilterBar setSearchTerm={setSearchTerm} />
      </div>

      <section className="pet-post">
        {filteredPosts.length === 0 ? (
          <p>No posts found.</p>
        ) : (
          filteredPosts.slice((currentPage - 1) * postsPerPage, currentPage * postsPerPage).map(petPost => (
            <div key={petPost.id} className="pet-card">
              <header className="petPost-header">{petPost.name}</header>
              <div><img src={petPost.photo} alt={petPost.name} className="pet-photo" onClick={() => navigate(`/availablePets/petDetails/${petPost.id}`)} /></div>
            </div>
          ))
        )}
      </section>

      {/* Pagination */}
      <ul className="pagination">
        {Array.from({ length: Math.ceil(filteredPosts.length / postsPerPage) }, (_, i) => (
          <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
            <button onClick={() => handlePageChange(i + 1)} className="page-link">
              {i + 1}
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PetPost;
2. Filter Bar Component (FilterBar.jsx)
javascript
Copy code
import React from 'react';

const FilterBar = ({ setSearchTerm }) => {
  return (
    <div className="filter-bar">
      <input type="text" placeholder="Search" className="search" onChange={(event) => setSearchTerm(event.target.value)} />
    </div>
  );
};

export default FilterBar;
3. Using the Component in Your Application
Assuming you have a mechanism to determine the logged-in user dynamically (e.g., via authentication), pass the logged-in user data to PetPost component:

javascript
Copy code
import React from 'react';
import PetPost from './components/PetPost';
import { getCurrentUser } from './services/authService'; // Example function to get current user

const App = () => {
  const loggedInUser = getCurrentUser(); // Example function to get current user data

  return (
    <div className="App">
      <PetPost loggedInUser={loggedInUser} />
    </div>
  );
};

export default App;
Notes:
Backend Integration: Ensure getAllPetPosts function correctly fetches pet posts and includes necessary owner details (city and state).
Authentication: Implement getCurrentUser function to retrieve logged-in user details dynamically.
Location Filtering: Adjust applyLocationFilter function based on your actual data structure (e.g., how owner details are linked with pet posts).
This setup assumes you have a backend service that provides pet posts with owner details including city and state. Adjust the implementation as per your backend API structure and data relationships. The UI allows users to filter pet posts based on species, age, search terms, and location dynamically.




ChatGPT c